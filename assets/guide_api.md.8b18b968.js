import{_ as e,c as t,o as s,a}from"./app.05c52732.js";const f='{"title":"API Reference","description":"","frontmatter":{},"headers":[{"level":2,"title":"Helper Methods","slug":"helper-methods"},{"level":3,"title":"buildOptionsToArgs","slug":"buildoptionstoargs"},{"level":3,"title":"argsToBuildOptions","slug":"argstobuildoptions"},{"level":2,"title":"Requires esbuild","slug":"requires-esbuild"},{"level":3,"title":"importFile","slug":"importfile"},{"level":3,"title":"requireFile","slug":"requirefile"},{"level":3,"title":"external","slug":"external"}],"relativePath":"guide/api.md","lastUpdated":1638926287795}',n={},o=a(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-hidden="true">#</a></h1><h2 id="helper-methods" tabindex="-1">Helper Methods <a class="header-anchor" href="#helper-methods" aria-hidden="true">#</a></h2><h3 id="buildoptionstoargs" tabindex="-1"><code>buildOptionsToArgs</code> <a class="header-anchor" href="#buildoptionstoargs" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>(options: BuildOptions | TransformOptions) =&gt; string[]</code></li></ul><p>Transform build options object to command line arguments.</p><div class="language-ts"><pre><code><span class="token function">buildOptionsToArgs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; [&quot;--target=es6&quot;]</span>
</code></pre></div><ul><li>It does not check whether the options are valid.</li><li>The output array does not including <code>&quot;</code>s around the arguments.<br> i.e. It will output <code>--banner:js=a b c</code> instead of <code>--banner:js=&quot;a b c&quot;</code>.</li></ul><h3 id="argstobuildoptions" tabindex="-1"><code>argsToBuildOptions</code> <a class="header-anchor" href="#argstobuildoptions" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>(args: string[]) =&gt; BuildOptions &amp; TransformOptions</code></li></ul><p>The reverse of <code>buildOptionsToArgs</code>.</p><div class="language-ts"><pre><code><span class="token function">argsToBuildOptions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;--target=es6&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; { target: &quot;es6&quot; }</span>
</code></pre></div><p>Same caveats as <code>buildOptionsToArgs</code>. You should pass in <code>--banner:js=a b c</code> instead of <code>--banner:js=&quot;a b c&quot;</code>.</p><h2 id="requires-esbuild" tabindex="-1">Requires <code>esbuild</code> <a class="header-anchor" href="#requires-esbuild" aria-hidden="true">#</a></h2><h3 id="importfile" tabindex="-1"><code>importFile</code> <a class="header-anchor" href="#importfile" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>(path: string) =&gt; Promise&lt;any&gt;</code></li></ul><p>Imports a file like the built-in <code>import()</code>, except that it can also accept several other file extensions including <code>.ts</code>.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importFile</span><span class="token punctuation">(</span><span class="token string">&quot;config.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Very suitable for implementing config function like <code>vite.config.ts</code> for vite.</p><h3 id="requirefile" tabindex="-1"><code>requireFile</code> <a class="header-anchor" href="#requirefile" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>(path: string) =&gt; Promise&lt;any&gt;</code></li></ul><p>Similar to <code>importFile()</code>, but internally it uses commonjs format.</p><h3 id="external" tabindex="-1"><code>external</code> <a class="header-anchor" href="#external" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>(path: string) =&gt; Promise&lt;string[]&gt;</code></li></ul><p>Scan an entry file to guess potential external libraries of your project.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> externals <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">external</span><span class="token punctuation">(</span><span class="token string">&quot;src/index.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [&quot;esbuild&quot;, &quot;path&quot;, &quot;fs&quot;]</span>
</code></pre></div><p>It works by bundling your source once with a custom plugin that externalizes all <a href="https://github.com/dword-design/package-name-regex" target="_blank" rel="noopener noreferrer"><q>package-name-like</q></a> imports. This function is suitable for implementing the pre-bundling optimization of vite. Although they achieve this with <a href="https://github.com/guybedford/es-module-lexer" target="_blank" rel="noopener noreferrer">es-module-lexer</a>.</p>`,26),i=[o];function r(l,p,c,d,u,h){return s(),t("div",null,i)}var m=e(n,[["render",r]]);export{f as __pageData,m as default};
